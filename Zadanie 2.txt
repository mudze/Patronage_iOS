class FlashCard{
    enum TypeOfTips
    {
        case text(text: String)
        case imagine(text: String)
        case sound(text: String)
        
        func descriptionTips()->String
        {
            switch self
            {
                case .text(let value):
                    return value
                case .imagine(let value):
                    return value
                case .sound(let value):
                    return value
            }
        }
    }
    let polish:String
    let english:String
    var taught:Bool
    var tips:[TypeOfTips]
    
    init(polish:String, english:String, tips:TypeOfTips... )
    {
        self.polish = polish
        self.english = english
        self.taught = false
        self.tips = tips
    }
    
    func description()->String
    {
        var string = self.polish + " -> " + self.english + " ["
        
        for (index, loopTips) in self.tips.enumerate(){
            
             if index < (self.tips.count-1)
            {
                string += loopTips.descriptionTips() +  ", "
            }
            else
            {
                string += loopTips.descriptionTips() + "]"
            }
        }
        return string
    }
    
    func taughtChange()
    {
        self.taught = !self.taught
    }
    
    func hasLerned()-> Bool
    {
        return self.taught;
    }
}

    let card = FlashCard(polish:"zielony", english:"green", tips: .text(text:"color of the grass"), .sound(text:"sound link"), .imagine(text:"imagine link"))
    card.taughtChange();
    
    print("He/She lerned to: \(card.hasLerned())")
    
    let f = card.description();
    
    print(f)



